name: CI

on:
  - push
  - pull_request

jobs:
  build:
    name: eclingo ${{ matrix.python-version }} ${{ matrix.os }} ${{ matrix.clingo-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.9', '3.11', '3.12']
        clingo-version: ['>=5.5.0,<5.6.0','>=5.7.0,<5.8.0']

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Cache nox
      id: cache-nox
      uses: actions/cache@v3
      with:
        path: .nox
        key: ${{ runner.os }}-nox

    - name: Install dependencies
      run: |
        python -m pip install nox

    - name: Info
      run: |
        python -VV
        pip list

    # - run: poetry run pytest

    - name: run tests
      run: nox -r

    # - name: install dependencies
    #   run: python -m pip install -r requirements.txt

    # - name: run tests
    #   run: nox
    # - name: Set up Python
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: ${{ matrix.python-version }}

    # - name: Set up Clingo
    #   shell: pwsh
    #   run: pip install "clingo${{ matrix.clingo-version }}"

    # - name: install dev prerequisites
    #   shell: pwsh
    #   run: pip install -r .github/requirements.txt

    # - name: info
    #   shell: pwsh
    #   run: |
    #     python -VV
    #     python -c "import clingo; print(clingo.__version__)"

    # - name: install eclingo
    #   shell: pwsh
    #   run: python -m pip install .

    # - name: test
    #   shell: pwsh
    #   run: coverage run -m unittest discover -v

    # - name: type check
    #   shell: pwsh
    #   run: mypy -p clingox

    # - name: lint (pylint)
    #   if: ${{ matrix.python-version != '3.6' }}
    #   shell: pwsh
    #   run: pylint clingox

    # - name: lint (flake8)
    #   shell: pwsh
    #   run: flake8

    # - name: coverage
    #   shell: pwsh
    #   run: coverage report --fail-under=100
