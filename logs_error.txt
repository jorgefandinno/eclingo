LOGS of ERRORS while adapting tests to reification version.

Error 1: (PROPOSED SOLUTION)

    File: test_eclingo.py

    Test: TestEclingoCommontToAllSemantics

    Program: "a :- not &k{b}. b :- not &k{a}."

    Old solution: [["&k{a}"], ["&k{b}"]]

    Current solution given reification: [[], ["&k{a}"], ["&k{b}"]]

    Hypothesis: cautious yields the empty set as solution. Brave does not.

Let's debug:

Gives 3 solutions, 1 WView.
Empty set -> [] is not part of the solution.

The reified facts are:  

tag(incremental). atom_tuple(0). atom_tuple(0,1). literal_tuple(0). literal_tuple(0,-2).
rule(disjunction(0),normal(0)). atom_tuple(1). atom_tuple(1,3). literal_tuple(1). literal_tuple(1,1).
rule(choice(1),normal(1)). atom_tuple(2). atom_tuple(2,4). literal_tuple(2). literal_tuple(2,-3).
rule(disjunction(2),normal(2)). atom_tuple(3). atom_tuple(3,2). literal_tuple(3). literal_tuple(3,4).
rule(choice(3),normal(3)). literal_tuple(4). literal_tuple(4,2). output(k(u(b)),4). literal_tuple(5).
literal_tuple(5,3). output(k(u(a)),5). output(u(a),1). output(u(b),3).


The candidate:  Candidate(pos=[], neg=[k(u(b)), k(u(a))])
The world view:  []

The candidate:  Candidate(pos=[k(u(a))], neg=[k(u(b))])
The world view:  ['&k{a}']

The candidate:  Candidate(pos=[k(u(b))], neg=[k(u(a))])
The world view:  ['&k{b}']


Could it be that we declare: epistemic_literals = []
And therefore we create an empty world view of that empty set?

self.control.configuration.solve.project = "no" If using projection, [] does not append


"no" ->

The model  
literal_tuple(1,1) literal_tuple(3,4) literal_tuple(4,2) literal_tuple(5,3) literal_tuple(0,-2)
literal_tuple(2,-3) literal_tuple(0) literal_tuple(1) literal_tuple(2) literal_tuple(3) literal_tuple(4)
literal_tuple(5) atom_tuple(0,1) atom_tuple(1,3) atom_tuple(2,4) atom_tuple(3,2) rule(disjunction(0),normal(0))
rule(choice(1),normal(1)) rule(disjunction(2),normal(2)) rule(choice(3),normal(3)) output(k(u(b)),4)
output(k(u(a)),5) output(u(a),1) output(u(b),3) tag(incremental) atom_tuple(0) atom_tuple(1) atom_tuple(2) atom_tuple(3) 











Error 2: (PROPOSED SOLUTION)

    File: test_eclingo.py

    Test: TestEclingoAggregates

    Program:  """a :- not &k{ not a}. b :- a. c :- &k{b}. d :- &k{c}."""

    Old solution: [[], ["&m{a}", "&k{b}", "&k{c}"]]

    Current solution given reification: [[], ["&m{a}"]]

    Hypothesis: since not k(not a) must be in some answer set. it does not derive b all the time. Therefore c and d are not derived.

Error 3:

    File: test_eclingo.py

    Test: TestEclingoAggregates

    Program:  """{fact}.
            :- not fact.
            a :- not &k{ not a}.
            b :- #sum{1:fact; 25:a} >= 24.
            c :- &k{b}.
            d :- &k{c}."""

    Old solution: [[], ["&m{a}", "&k{b}", "&k{c}"]]

    Current solution given reification: [[], ["&m{a}"]]

    Hypothesis: Does the new implementation account for aggregates (?)

Error 5:

    File: test_eclingo.py

    Test: TestEclingoNonGround.test_programs_with_default_negation

    Program:  """
            a(1) :- not c(1).
            c(1) :- not a(1).
            b(X) :- not &k{ not a(X) }, dom(X).
            dom(1..2).
            d(X) :- &k{ b(X) }.
            """

    Old solution: [["&m{a(1)}", "&k{b(1)}"]]

    Current solution given reification: [["&m{a(1)}"]]

    Hypothesis: b(X) is only true for some answer sets, therefore k(b(X)) not true for all.

Error 6:

    File: test_eclingo.py

    Test: TestEclingoNonGround.test_programs_with_default_negation

    Program:  
            """
                a(1), c(1).
                b(X) :- not &k{ not a(X) }, dom(X).
                dom(1..2).
                d(X) :- &k{ b(X) }.     
            """

    Old solution: [["&m{a(1)}", "&k{b(1)}"]]

    Current solution given reification: [["&m{a(1)}"]]

    Hypothesis: new implementation (?)


Error 7 (SAME as error 1)

    File: test_app.py (input -> prog02.lp, output -> sol02.txt)

    Test: TestExamples.test_prog_g94

    Program:  
            """
                a :- not &k{ b }.                                     
                b :- not &k{ a }.    
            """

    Old solution: [[&k{a}],[&k{b}]]

    Current solution given reification: [[],[&k{a}],[&k{b}]]

    Hypothesis: CHECK LOG FOR ERROR 1


Error 8:

    Lines
    # self.assert_world_views(
    #     command, [elegible_path, input_path], output_path, external_call=False
    # )

    of TestExamples.test_eligible_g94

    cause it to fail on sol_eligible2.txt, eligible2.lp






