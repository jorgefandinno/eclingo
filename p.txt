All done! ‚ú® üç∞ ‚ú®
26 files left unchanged.
Success: no issues found in 26 source files
test_non_epistemic_rules (tests.test_reification.Test) ... FAIL
test_multiple_variables_symbolic_literal_to_term (tests.test_reification2.Test) ... ok
test_non_ground_symbolic_literal_to_term (tests.test_reification2.Test) ... ok
test_symbolic_literal_to_term (tests.test_reification2.Test) ... ok
test_theory_atom_symbolic_literal_to_term (tests.test_reification2.Test) ... ok
test_theory_atom (tests.test_reification3.Test) ... ok
test_theory_atom_negation (tests.test_reification4.Test) ... ok
test_eligible_g94 (tests.test_app.TestExamples) ... <string>:2:16-27: info: atom does not occur in any rule head:
  u_minority(X)

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

ok
test_prog_g94 (tests.test_app.TestExamples) ... <string>:1:13-14: info: atom does not occur in any rule head:
  u_b

<string>:1:13-14: info: atom does not occur in any rule head:
  u_b

ok
test_yale_g94 (tests.test_app.TestExamples) ... ok
test_ground_programs (tests.test_eclingo.TestEclingoAggregates) ... ok
test_ground_programs (tests.test_eclingo.TestEclingoCommontToAllSemantics) ... ok
test_ground_programs (tests.test_eclingo.TestEclingoCommontTo_G11_FAEEL) ... ok
test_ground_programs (tests.test_eclingo.TestEclingoCommontTo_G94_G11_FAEEL) ... ok
test_objective_programs (tests.test_eclingo.TestEclingoGround) ... ok
test_positive_programs (tests.test_eclingo.TestEclingoGround) ... ok
test_programs_with_default_negation (tests.test_eclingo.TestEclingoGround) ... ok
test_programs_with_strong_negation (tests.test_eclingo.TestEclingoGround) ... ok
test_grounding_simplifications (tests.test_eclingo.TestEclingoNonGround) ... ok
test_objective_programs (tests.test_eclingo.TestEclingoNonGround) ... ok
test_positive_programs (tests.test_eclingo.TestEclingoNonGround) ... ok
test_programs_with_default_negation (tests.test_eclingo.TestEclingoNonGround) ... ok
test_programs_with_strong_negation (tests.test_eclingo.TestEclingoNonGround) ... ok
test_ground_programs (tests.test_eclingo.TestEclingoUnfounded) ... ok
test_eligible_g94 (tests.test_eclingo_examples.TestExamples) ... <string>:2:16-27: info: atom does not occur in any rule head:
  u_minority(X)

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

<string>:3:17-28: info: atom does not occur in any rule head:
  (-u_fairGPA(X))

<string>:3:30-41: info: atom does not occur in any rule head:
  (-u_highGPA(X))

ok
test_prog_g94 (tests.test_eclingo_examples.TestExamples) ... <string>:1:13-14: info: atom does not occur in any rule head:
  u_b

ok
test_yale_g94 (tests.test_eclingo_examples.TestExamples) ... ok
test_parsing_ground_programs (tests.test_g94.Test) ... ok
test_epistemic_atom (tests.test_grounder.Test) ... ok
test_epistemic_atom0 (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_both_negations01 (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_both_negations01b (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_both_negations02 (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_default_negation01 (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_default_negation02 (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_default_negation03 (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_strong_negation01 (tests.test_grounder.Test) ... ok
test_epistemic_atom_with_strong_negation02 (tests.test_grounder.Test) ... ok
test_epistemic_with_variables01 (tests.test_grounder.Test) ... ok
test_epistemic_with_variables02 (tests.test_grounder.Test) ... ok
test_epistemic_with_variables03 (tests.test_grounder.Test) ... ok
test_epistemic_with_variables04 (tests.test_grounder.Test) ... ok
test_epistemic_with_variables05 (tests.test_grounder.Test) ... ok
test_negated_epistemic_literals01 (tests.test_grounder.Test) ... ok
test_parameters (tests.test_grounder.Test) ... ok
test_show01 (tests.test_grounder.Test) ... ok
test_show02 (tests.test_grounder.Test) ... ok
test_show03 (tests.test_grounder.Test) ... ok
test_repr (tests.test_literals.Test) ... ok
test_str (tests.test_literals.Test) ... ok
test_parsing_theory_atoms (tests.test_internal_control_ground_program.Test) ... ok
test_prg01 (tests.test_internal_control_ground_program.Test)
Checks that the models of program are models. ... ok
test_prg01_pretty_ground_program (tests.test_internal_control_ground_program.Test) ... ok
test_prg01_pretty_ground_program_add (tests.test_internal_control_ground_program.Test) ... ok
test_epistemic_atom (tests.test_parsing.Test) ... ok
test_epistemic_atom_with_both_negations (tests.test_parsing.Test) ... ok
test_epistemic_atom_with_default_negation (tests.test_parsing.Test) ... ok
test_epistemic_atom_with_strong_negation (tests.test_parsing.Test) ... ok
test_epistemic_with_variables (tests.test_parsing.Test) ... ok
test_epistemic_with_variables_safety01 (tests.test_parsing.Test) ... ok
test_epistemic_with_variables_safety02 (tests.test_parsing.Test) ... ok
test_epistemic_with_variables_safety03 (tests.test_parsing.Test) ... ok
test_epistemic_with_variables_safety04 (tests.test_parsing.Test) ... ok
test_heuristic (tests.test_parsing.Test) ... ok
test_negated_epistemic_literals (tests.test_parsing.Test) ... ok
test_parameters01 (tests.test_parsing.Test) ... ok
test_parameters02 (tests.test_parsing.Test) ... ok
test_weighted_rules (tests.test_parsing.Test) ... ok
test_show01c (tests.test_show.Test) ... ok
test_show02c (tests.test_show.Test) ... ok
test_show03_not_supported (tests.test_show.Test) ... ok
test_show04 (tests.test_show.Test) ... ok
test_show05 (tests.test_show.Test) ... ok
test_show05b (tests.test_show.Test) ... ok
test_show05c (tests.test_show.Test) ... ok
test_show05d (tests.test_show.Test) ... ok
test_show06 (tests.test_show.Test) ... ok
test_show06b (tests.test_show.Test) ... ok
test_show06c (tests.test_show.Test) ... ok
test_show07 (tests.test_show.Test) ... ok
test_show08 (tests.test_show.Test) ... ok
test_show09 (tests.test_show.Test) ... ok
test_show10_positive_programs (tests.test_show.Test) ... ok
test_show11_programs_with_strong_negation (tests.test_show.Test) ... ok
test_show12_programs_with_default_negation (tests.test_show.Test) ... ok
test_show13_non_ground_programs (tests.test_show.Test) ... ok
test_show14_non_ground_programs_with_default_negation (tests.test_show.Test) ... ok
test_show15_planning (tests.test_show.Test) ... ok
test_clingox (tests.test_tester.TesterCase) ... ok
test_init_control (tests.test_tester.TesterCase) ... ok
test_theory_parse (tests.test_theory_atom_parser.TesterCase) ... ok
test_theory_parse_element (tests.test_theory_atom_parser.TesterCase) ... ok
test_theory_parse_term (tests.test_theory_atom_parser.TesterCase) ... ok
test_theory_parse_with_clingox_theory (tests.test_theory_atom_parser.TesterCase) ... ok
test_theory_parse_with_theory (tests.test_theory_atom_parser.TesterCase) ... ok
test_epistemic_atom (tests.test_transformers.Test) ... ok

======================================================================
FAIL: test_non_epistemic_rules (tests.test_reification.Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/lutelillo/Desktop/lute_eclingo/eclingo/tests/test_reification.py", line 63, in test_non_epistemic_rules
    self.assert_equal_program(
  File "/Users/lutelillo/Desktop/lute_eclingo/eclingo/tests/test_reification.py", line 57, in assert_equal_program
    self.assertEqual(e1, e2)
AssertionError: "ast.Rule(location=LOC,\n         head=ast.Literal(location=LOC,\n                          sign=0,\n                          atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                    name='u',\n                                                                    arguments=[ast.Function(location=LOC,\n                                                                                            name='a',\n                                                                                            arguments=[],\n                                                                                            external=0)],\n                                                                    external=0))),\n         body=[ast.Literal(location=LOC,\n                           sign=0,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.Function(location=LOC,\n                                                                                             name='b',\n                                                                                             arguments=[],\n                                                                                             external=0)],\n                                                                     external=0))),\n               ast.Literal(location=LOC,\n                           sign=0,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.Function(location=LOC,\n                                                                                             name='c',\n                                                                                             arguments=[],\n                                                                                             external=0)],\n                                                                     external=0))),\n               ast.Literal(location=LOC,\n                           sign=1,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.Function(location=LOC,\n                                                                                             name='d',\n                                                                                             arguments=[],\n                                                                                             external=0)],\n                                                                     external=0))),\n               ast.Literal(location=LOC,\n                           sign=2,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.Function(location=LOC,\n                                                                                             name='e',\n                                                                                             arguments=[],\n                                                                                             external=0)],\n                                                                     external=0)))])\n" != "ast.Rule(location=LOC,\n         head=ast.Literal(location=LOC,\n                          sign=0,\n                          atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                    name='u',\n                                                                    arguments=[ast.SymbolicTerm(location=LOC,\n                                                                                                symbol=Function('a',\n                                                                                                                [],\n                                                                                                                True))],\n                                                                    external=0))),\n         body=[ast.Literal(location=LOC,\n                           sign=0,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.SymbolicTerm(location=LOC,\n                                                                                                 symbol=Function('b',\n                                                                                                                 [],\n                                                                                                                 True))],\n                                                                     external=0))),\n               ast.Literal(location=LOC,\n                           sign=0,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.SymbolicTerm(location=LOC,\n                                                                                                 symbol=Function('c',\n                                                                                                                 [],\n                                                                                                                 True))],\n                                                                     external=0))),\n               ast.Literal(location=LOC,\n                           sign=1,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.SymbolicTerm(location=LOC,\n                                                                                                 symbol=Function('d',\n                                                                                                                 [],\n                                                                                                                 True))],\n                                                                     external=0))),\n               ast.Literal(location=LOC,\n                           sign=2,\n                           atom=ast.SymbolicAtom(symbol=ast.Function(location=LOC,\n                                                                     name='u',\n                                                                     arguments=[ast.SymbolicTerm(location=LOC,\n                                                                                                 symbol=Function('e',\n                                                                                                                 [],\n                                                                                                                 True))],\n                                                                     external=0)))])\n"
Diff is 10506 characters long. Set self.maxDiff to None to see it.

----------------------------------------------------------------------
Ran 96 tests in 19.394s

FAILED (failures=1)
{a}. b :- &k{a}.
{a}.
{-a}. b :- &k{ not -a}.
b :- &k{ not -a}.
{-a}. b:- &k{ not not -a}.
{a}. b :- &k{ not a}.
b :- &k{ not a}.
{a}. b :- &k{ not not a}.
{-a}. b :- &k{-a}.
{a}. b :- &k{- -a}.
{a(1..2)}. b :- &k{a(V0)}.
{-a(1..2)}. b :- &k{-a(V0)}.
{a(1)}. b :- &k{- -a(V0)}.
{a(1)}. dom(1). b :- &k{ not a(V0)}, dom(V0).
{a(1)}. dom(1). b :- &k{ not not a(V0)}, dom(V0).
{a(1..2)}. {b(1)}. c :- not &k{a(V0)}, &k{b(V0)}.
a. b. #show a/0.
a. b. #show a/0. #show b/0.
-a. b. #show -a/0.
Name                                                          Stmts   Miss  Cover   Missing
-------------------------------------------------------------------------------------------
src/eclingo/parsing/transformers/parser_negations.py             83      2    98%   48, 145
src/eclingo/parsing/transformers/theory_parser_epistemic.py     112      1    99%   225
src/eclingo/__init__.py                                           1      0   100%
src/eclingo/config.py                                             5      0   100%
src/eclingo/control.py                                           45      0   100%
src/eclingo/grounder.py                                          20      0   100%
src/eclingo/internal_states/__init__.py                           0      0   100%
src/eclingo/internal_states/internal_control.py                  89      0   100%
src/eclingo/internal_states/mappings.py                          49      0   100%
src/eclingo/literals.py                                          38      0   100%
src/eclingo/main.py                                              40      0   100%
src/eclingo/parsing/__init__.py                                   0      0   100%
src/eclingo/parsing/parser.py                                    69      0   100%
src/eclingo/parsing/transformers/__init__.py                      0      0   100%
src/eclingo/parsing/transformers/ast_reify.py                    28      0   100%
src/eclingo/parsing/transformers/astutil.py                       7      0   100%
src/eclingo/prefixes.py                                          35      0   100%
src/eclingo/solver/__init__.py                                    1      0   100%
src/eclingo/solver/candidate.py                                   5      0   100%
src/eclingo/solver/generator.py                                  26      0   100%
src/eclingo/solver/preprocessor.py                               23      0   100%
src/eclingo/solver/solvers.py                                    23      0   100%
src/eclingo/solver/tester.py                                     55      0   100%
src/eclingo/solver/world_view.py                                  6      0   100%
src/eclingo/solver/world_view_builder.py                         67      0   100%
-------------------------------------------------------------------------------------------
TOTAL                                                           827      3    99%
Coverage failure: total of 99 is less than fail-under=100

--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)

