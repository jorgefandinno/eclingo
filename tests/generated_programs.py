"""
DO NO MODIFY THIS FILE MANUALLY!

This file is generated by tests/build_programs.py
Modify the file "test/programs.py" and run "python test/build_programs.py" instead.
"""


from clingo import Function, Number

from eclingo.solver.candidate import Assumptions, Candidate
from tests.programs_helper import Program

programs = [
    Program(
        program="a. b :- &k{a}.",
        non_ground_reification="u(a). u(b) :- k(u(a)). { k(u(a)) } :- u(a).",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "rule(choice(1),normal(0)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,2).\n"
        "rule(disjunction(2),normal(1)).\n"
        "output(k(u(a)),1).\n"
        "output(u(a),0).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "output(u(b),2).\n",
        candidates_00_str="['k(a)', 'no(k(a))']",
        candidates_00=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_01_str="[('k(a)', 'a')]",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            )
        ],
        candidates_02_str="[('k(a)', 'a')]",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            )
        ],
        candidates_03_str="[('k(a)', 'a')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            )
        ],
        candidates_wv_str="[('k(a)', 'a')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            )
        ],
        fast_preprocessing_str="a b k(a)",
        fast_preprocessing=(
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
            ],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a. b :- &k{a}. c :- &k{b}.",
        non_ground_reification="u(a).\n"
        "u(b) :- k(u(a)).\n"
        "{ k(u(a)) } :- u(a).\n"
        "u(c) :- k(u(b)).\n"
        "{ k(u(b)) } :- u(b).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "rule(choice(1),normal(0)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,2).\n"
        "rule(disjunction(2),normal(1)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(choice(3),normal(2)).\n"
        "atom_tuple(4).\n"
        "atom_tuple(4,5).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,4).\n"
        "rule(disjunction(4),normal(3)).\n"
        "output(k(u(a)),1).\n"
        "output(k(u(b)),3).\n"
        "output(u(a),0).\n"
        "output(u(b),2).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,5).\n"
        "output(u(c),4).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="[('k(a) no(k(b))', 'a'), ('k(a) k(b)', 'a')]",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            ),
        ],
        candidates_02_str="[('k(a) k(b)', 'a b')]",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("b", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        candidates_03_str="[('k(a) k(b)', 'a b')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("b", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        candidates_wv_str="[('k(a) k(b)', 'a b')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("b", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        fast_preprocessing_str="a b c k(a) k(b)",
        fast_preprocessing=(
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("u", [Function("c", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("b", [], True)], True)], True),
            ],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("u", [Function("c", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("b", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. b :- &k{a}.",
        non_ground_reification="{u(a)}. u(b) :- k(u(a)). { k(u(a)) } :- u(a).",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,1).\n"
        "rule(choice(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,2).\n"
        "rule(disjunction(2),normal(2)).\n"
        "output(u(a),1).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,3).\n"
        "output(u(b),3).\n"
        "output(k(u(a)),2).\n",
        candidates_00_str="['k(a)', 'no(k(a))']",
        candidates_00=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_01_str="['k(a)', 'no(k(a))']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="['k(a)', 'no(k(a))']",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_03_str="['k(a)', 'no(k(a))']",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_wv_str="['k(a)', 'no(k(a))']",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        fast_preprocessing_str=("", "a b k(a)"),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. b :- &k{a}. :- not b.",
        non_ground_reification="\n"
        "            {u(a)}.\n"
        "            u(b) :- k(u(a)).\n"
        "            { k(u(a)) } :- u(a).\n"
        "            :- not u(b).\n"
        "            ",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,1).\n"
        "rule(choice(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,2).\n"
        "rule(disjunction(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,-3).\n"
        "rule(disjunction(3),normal(3)).\n"
        "output(u(a),1).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,3).\n"
        "output(u(b),4).\n"
        "output(k(u(a)),2).\n",
        candidates_00_str="[('k(a)', '')]",
        candidates_00=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_01_str="[('k(a)', '')]",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_02_str="[('k(a)', '')]",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_03_str="[('k(a)', '')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_wv_str="[('k(a)', '')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        fast_preprocessing_str=("b k(a)", "a b k(a)"),
        fast_preprocessing=(
            [
                Function("u", [Function("b", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
            ],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. :- not a. b :- &k{a}.",
        non_ground_reification="{u(a)}. :- not u(a). u(b) :- k(u(a)). { k(u(a)) } "
        ":- u(a).",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,1).\n"
        "rule(choice(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,2).\n"
        "rule(disjunction(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,-1).\n"
        "rule(disjunction(3),normal(3)).\n"
        "output(u(a),1).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,3).\n"
        "output(u(b),4).\n"
        "output(k(u(a)),2).\n",
        candidates_00_str="['k(a)', 'no(k(a))']",
        candidates_00=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_01_str="['k(a)', 'no(k(a))']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="[('k(a)', 'a')]",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            )
        ],
        candidates_03_str="[('k(a)', 'a')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            )
        ],
        candidates_wv_str="[('k(a)', 'a')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            )
        ],
        fast_preprocessing_str=("a b k(a)", "a b k(a)"),
        fast_preprocessing=(
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
            ],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. :- a. b :- &k{a}.",
        non_ground_reification="{u(a)}. :- u(a). u(b) :- k(u(a)). { k(u(a)) } :- "
        "u(a).",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,1).\n"
        "rule(choice(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,2).\n"
        "rule(disjunction(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "rule(disjunction(3),normal(1)).\n"
        "output(u(a),1).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,3).\n"
        "output(u(b),3).\n"
        "output(k(u(a)),2).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['no(k(a))']",
        candidates_01=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_02_str="['no(k(a))']",
        candidates_02=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_03_str="['no(k(a))']",
        candidates_03=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_wv_str="['no(k(a))']",
        candidates_wv=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        fast_preprocessing_str="",
        fast_preprocessing=([], []),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a. b :- &k{not a}.",
        non_ground_reification="u(a).\n"
        "u(b) :- k(not1(u(a))).\n"
        "{ k(not1(u(a))) } :- not1(u(a)).\n"
        "not1(u(a)) :- not u(a).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(disjunction(0),normal(0)).\n"
        "output(u(a),0).\n",
        candidates_00_str="['']",
        candidates_00=[
            Candidate(pos=[], neg=[], extra_assumptions=Assumptions(pos=[], neg=[]))
        ],
        candidates_01_str="['']",
        candidates_01=[
            Candidate(pos=[], neg=[], extra_assumptions=Assumptions(pos=[], neg=[]))
        ],
        candidates_02_str="['']",
        candidates_02=[
            Candidate(pos=[], neg=[], extra_assumptions=Assumptions(pos=[], neg=[]))
        ],
        candidates_03_str="['']",
        candidates_03=[
            Candidate(pos=[], neg=[], extra_assumptions=Assumptions(pos=[], neg=[]))
        ],
        candidates_wv_str="['']",
        candidates_wv=[
            Candidate(pos=[], neg=[], extra_assumptions=Assumptions(pos=[], neg=[]))
        ],
        fast_preprocessing_str="a",
        fast_preprocessing=(
            [Function("u", [Function("a", [], True)], True)],
            [Function("u", [Function("a", [], True)], True)],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. b :- &k{not a}.",
        non_ground_reification="{ u(a) }.\n"
        "u(b) :- k(not1(u(a))).\n"
        "{ k(not1(u(a))) } :- not1(u(a)).\n"
        "not1(u(a)) :- not u(a).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-1).\n"
        "rule(disjunction(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,2).\n"
        "rule(choice(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,3).\n"
        "rule(disjunction(3),normal(3)).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,1).\n"
        "output(u(a),4).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,4).\n"
        "output(u(b),5).\n"
        "output(k(not1(u(a))),3).\n"
        "output(not1(u(a)),2).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['k(not1(a))', 'no(k(not1(a)))']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="['k(not1(a))', 'no(k(not1(a)))']",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_03_str="['k(not1(a))', 'no(k(not1(a)))']",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_wv_str="['k(not1(a))', 'no(k(not1(a)))']",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        fast_preprocessing_str=("", "a b not1(a) k(not1(a))"),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function(
                    "not1", [Function("u", [Function("a", [], True)], True)], True
                ),
                Function(
                    "k",
                    [
                        Function(
                            "not1",
                            [Function("u", [Function("a", [], True)], True)],
                            True,
                        )
                    ],
                    True,
                ),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. :- not a. b :- &k{not a}.",
        non_ground_reification="{ u(a) }.\n"
        "#false :- not u(a).\n"
        "u(b) :- k(not1(u(a))).\n"
        "{ k(not1(u(a))) } :- not1(u(a)).\n"
        "not1(u(a)) :- not u(a).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-1).\n"
        "rule(disjunction(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,2).\n"
        "rule(choice(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,3).\n"
        "rule(disjunction(3),normal(3)).\n"
        "atom_tuple(4).\n"
        "rule(disjunction(4),normal(1)).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,1).\n"
        "output(u(a),4).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,4).\n"
        "output(u(b),5).\n"
        "output(k(not1(u(a))),3).\n"
        "output(not1(u(a)),2).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['no(k(not1(a)))']",
        candidates_01=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_02_str="['no(k(not1(a)))']",
        candidates_02=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_03_str="['no(k(not1(a)))']",
        candidates_03=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_wv_str="['no(k(not1(a)))']",
        candidates_wv=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        fast_preprocessing_str="a",
        fast_preprocessing=(
            [Function("u", [Function("a", [], True)], True)],
            [Function("u", [Function("a", [], True)], True)],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. :- a. b :- &k{not a}.",
        non_ground_reification="{ u(a) }.\n"
        "#false :- u(a).\n"
        "u(b) :- k(not1(u(a))).\n"
        "{ k(not1(u(a))) } :- not1(u(a)).\n"
        "not1(u(a)) :- not u(a).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-1).\n"
        "rule(disjunction(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,2).\n"
        "rule(choice(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,3).\n"
        "rule(disjunction(3),normal(3)).\n"
        "atom_tuple(4).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,1).\n"
        "rule(disjunction(4),normal(4)).\n"
        "output(u(a),4).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,4).\n"
        "output(u(b),5).\n"
        "output(k(not1(u(a))),3).\n"
        "output(not1(u(a)),2).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['k(not1(a))', 'no(k(not1(a)))']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="[('k(not1(a))', 'not1(a)')]",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            )
        ],
        candidates_03_str="[('k(not1(a))', 'not1(a)')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            )
        ],
        candidates_wv_str="[('k(not1(a))', 'not1(a)')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            )
        ],
        fast_preprocessing_str="b not1(a) k(not1(a))",
        fast_preprocessing=(
            [
                Function("u", [Function("b", [], True)], True),
                Function(
                    "not1", [Function("u", [Function("a", [], True)], True)], True
                ),
                Function(
                    "k",
                    [
                        Function(
                            "not1",
                            [Function("u", [Function("a", [], True)], True)],
                            True,
                        )
                    ],
                    True,
                ),
            ],
            [
                Function("u", [Function("b", [], True)], True),
                Function(
                    "not1", [Function("u", [Function("a", [], True)], True)], True
                ),
                Function(
                    "k",
                    [
                        Function(
                            "not1",
                            [Function("u", [Function("a", [], True)], True)],
                            True,
                        )
                    ],
                    True,
                ),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. {b}. :- not a. :- not b. c :- &k{a}, &k{b}.",
        non_ground_reification="{ u(a) }.\n"
        "{ u(b) }.\n"
        "#false :- not u(a).\n"
        "#false :- not u(b).\n"
        "u(c) :- k(u(a)); k(u(b)).\n"
        "{ k(u(a)) } :- u(a).\n"
        "{ k(u(b)) } :- u(b).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,1).\n"
        "rule(choice(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "rule(choice(2),normal(0)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(choice(3),normal(2)).\n"
        "atom_tuple(4).\n"
        "atom_tuple(4,5).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,2).\n"
        "literal_tuple(3,4).\n"
        "rule(disjunction(4),normal(3)).\n"
        "atom_tuple(5).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,-1).\n"
        "rule(disjunction(5),normal(4)).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,-3).\n"
        "rule(disjunction(5),normal(5)).\n"
        "output(u(b),1).\n"
        "output(u(a),2).\n"
        "literal_tuple(6).\n"
        "literal_tuple(6,5).\n"
        "output(u(c),6).\n"
        "literal_tuple(7).\n"
        "literal_tuple(7,2).\n"
        "output(k(u(b)),7).\n"
        "literal_tuple(8).\n"
        "literal_tuple(8,4).\n"
        "output(k(u(a)),8).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['no(k(a)) no(k(b))', 'no(k(a)) k(b)', 'k(a) "
        "no(k(b))', 'k(a) k(b)']",
        candidates_01=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="[('k(a) k(b)', 'a b')]",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("b", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        candidates_03_str="[('k(a) k(b)', 'a b')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("b", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        candidates_wv_str="[('k(a) k(b)', 'a b')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("b", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        fast_preprocessing_str="a b c k(a) k(b)",
        fast_preprocessing=(
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("u", [Function("c", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("b", [], True)], True)], True),
            ],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("u", [Function("c", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("b", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="{a}. {b}. :- not a, not b. :- a, not b. :- b, not a. c :- &k{a}, "
        "&k{b}.",
        non_ground_reification="{ u(a) }.\n"
        "{ u(b) }.\n"
        "#false :- not u(a); not u(b).\n"
        "#false :- u(a); not u(b).\n"
        "#false :- u(b); not u(a).\n"
        "u(c) :- k(u(a)); k(u(b)).\n"
        "{ k(u(a)) } :- u(a).\n"
        "{ k(u(b)) } :- u(b).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(choice(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,1).\n"
        "rule(choice(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "rule(choice(2),normal(0)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(choice(3),normal(2)).\n"
        "atom_tuple(4).\n"
        "atom_tuple(4,5).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,2).\n"
        "literal_tuple(3,4).\n"
        "rule(disjunction(4),normal(3)).\n"
        "atom_tuple(5).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,-3).\n"
        "literal_tuple(4,1).\n"
        "rule(disjunction(5),normal(4)).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,-1).\n"
        "literal_tuple(5,3).\n"
        "rule(disjunction(5),normal(5)).\n"
        "literal_tuple(6).\n"
        "literal_tuple(6,-1).\n"
        "literal_tuple(6,-3).\n"
        "rule(disjunction(5),normal(6)).\n"
        "output(u(b),1).\n"
        "output(u(a),2).\n"
        "literal_tuple(7).\n"
        "literal_tuple(7,5).\n"
        "output(u(c),7).\n"
        "literal_tuple(8).\n"
        "literal_tuple(8,2).\n"
        "output(k(u(b)),8).\n"
        "literal_tuple(9).\n"
        "literal_tuple(9,4).\n"
        "output(k(u(a)),9).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['no(k(a)) no(k(b))', 'no(k(a)) k(b)', 'k(a) "
        "no(k(b))', 'k(a) k(b)']",
        candidates_01=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="['no(k(a)) no(k(b))', 'no(k(a)) k(b)', 'k(a) "
        "no(k(b))', 'k(a) k(b)']",
        candidates_02=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_03_str="['no(k(a)) no(k(b))', 'no(k(a)) k(b)', 'k(a) "
        "no(k(b))', 'k(a) k(b)']",
        candidates_03=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_wv_str="['no(k(a)) no(k(b))', 'no(k(a)) k(b)', 'k(a) "
        "no(k(b))', 'k(a) k(b)']",
        candidates_wv=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("b", [], True)], True)], True
                    ),
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        fast_preprocessing_str=("", "a b c k(a) k(b)"),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("b", [], True)], True),
                Function("u", [Function("c", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("b", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a. :- a.",
        non_ground_reification="u(a).\n#false :- u(a).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "rule(disjunction(1),normal(0)).\n"
        "output(u(a),0).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="[]",
        candidates_01=[],
        candidates_02_str="[]",
        candidates_02=[],
        candidates_03_str="[]",
        candidates_03=[],
        candidates_wv_str="[]",
        candidates_wv=[],
        fast_preprocessing_str=None,
        fast_preprocessing=None,
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a. b :- &k{a}. :- b.",
        non_ground_reification="u(a).\n"
        "u(b) :- k(u(a)).\n"
        "{ k(u(a)) } :- u(a).\n"
        "#false :- u(b).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "rule(choice(1),normal(0)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,2).\n"
        "rule(disjunction(2),normal(1)).\n"
        "atom_tuple(3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(disjunction(3),normal(2)).\n"
        "output(k(u(a)),1).\n"
        "output(u(a),0).\n"
        "output(u(b),2).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="[]",
        candidates_01=[],
        candidates_02_str="[]",
        candidates_02=[],
        candidates_03_str="[]",
        candidates_03=[],
        candidates_wv_str="[]",
        candidates_wv=[],
        fast_preprocessing_str=None,
        fast_preprocessing=None,
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a :- not &k{not a}.",
        non_ground_reification="u(a) :- not k(not1(u(a))).\n"
        "{ k(not1(u(a))) } :- not1(u(a)).\n"
        "not1(u(a)) :- not u(a).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "literal_tuple(0,-2).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-3).\n"
        "rule(disjunction(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,1).\n"
        "rule(choice(2),normal(2)).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,3).\n"
        "output(k(not1(u(a))),3).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,2).\n"
        "output(u(a),4).\n"
        "output(not1(u(a)),2).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['no(k(not1(a)))', 'k(not1(a))']",
        candidates_01=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="['no(k(not1(a)))', 'k(not1(a))']",
        candidates_02=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_03_str="['no(k(not1(a)))', 'k(not1(a))']",
        candidates_03=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_wv_str="['no(k(not1(a)))', 'k(not1(a))']",
        candidates_wv=[
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [Function("u", [Function("a", [], True)], True)],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        fast_preprocessing_str=("", "a not1(a) k(not1(a))"),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [], True)], True),
                Function(
                    "not1", [Function("u", [Function("a", [], True)], True)], True
                ),
                Function(
                    "k",
                    [
                        Function(
                            "not1",
                            [Function("u", [Function("a", [], True)], True)],
                            True,
                        )
                    ],
                    True,
                ),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a :- not &k{-a}. -a :- not &k{a}.",
        non_ground_reification="u(a) :- not k(u(-a)).\n"
        "{ k(u(-a)) } :- u(-a).\n"
        "u(-a) :- not k(u(a)).\n"
        "{ k(u(a)) } :- u(a).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "literal_tuple(0,-2).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,3).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,1).\n"
        "rule(choice(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,4).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,-3).\n"
        "rule(disjunction(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,2).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,4).\n"
        "rule(choice(3),normal(3)).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,2).\n"
        "output(k(u(-a)),4).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,3).\n"
        "output(k(u(a)),5).\n"
        "output(u(a),1).\n"
        "output(u(-a),3).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['k(a) no(k(-a))', 'no(k(a)) k(-a)']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="['k(a) no(k(-a))', 'no(k(a)) k(-a)']",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_03_str="[('k(a) no(k(-a))', 'a'), ('no(k(a)) k(-a)', '-a')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], False)], True)], neg=[]
                ),
            ),
        ],
        candidates_wv_str="[('k(a) no(k(-a))', 'a'), ('no(k(a)) k(-a)', '-a')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], True)], True)], neg=[]
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], False)], True)], neg=[]
                ),
            ),
        ],
        fast_preprocessing_str=("", "a -a k(a) k(-a)"),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("a", [], False)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("a", [], False)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a :- not &k{-a}. -a :- not &k{a}. b :- a. c :- b. :- not &k{c}.",
        non_ground_reification="u(a) :- not k(u(-a)).\n"
        "{ k(u(-a)) } :- u(-a).\n"
        "u(-a) :- not k(u(a)).\n"
        "{ k(u(a)) } :- u(a).\n"
        "u(b) :- u(a).\n"
        "u(c) :- u(b).\n"
        "#false :- not k(u(c)).\n"
        "{ k(u(c)) } :- u(c).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "literal_tuple(0,-2).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,3).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-4).\n"
        "rule(disjunction(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,2).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(choice(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,1).\n"
        "rule(choice(3),normal(3)).\n"
        "atom_tuple(4).\n"
        "atom_tuple(4,5).\n"
        "rule(disjunction(4),normal(3)).\n"
        "atom_tuple(5).\n"
        "atom_tuple(5,6).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,5).\n"
        "rule(disjunction(5),normal(4)).\n"
        "atom_tuple(6).\n"
        "atom_tuple(6,7).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,6).\n"
        "rule(choice(6),normal(5)).\n"
        "atom_tuple(7).\n"
        "literal_tuple(6).\n"
        "literal_tuple(6,-7).\n"
        "rule(disjunction(7),normal(6)).\n"
        "literal_tuple(7).\n"
        "literal_tuple(7,2).\n"
        "output(k(u(-a)),7).\n"
        "literal_tuple(8).\n"
        "literal_tuple(8,4).\n"
        "output(k(u(a)),8).\n"
        "literal_tuple(9).\n"
        "literal_tuple(9,7).\n"
        "output(k(u(c)),9).\n"
        "output(u(a),3).\n"
        "output(u(-a),2).\n"
        "output(u(b),4).\n"
        "output(u(c),5).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['k(a) k(c) no(k(-a))']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_02_str="['k(a) k(c) no(k(-a))']",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            )
        ],
        candidates_03_str="[('k(a) k(c) no(k(-a))', 'a c')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("c", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        candidates_wv_str="[('k(a) k(c) no(k(-a))', 'a c')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("c", [], True)], True),
                    ],
                    neg=[],
                ),
            )
        ],
        fast_preprocessing_str=("k(c)", "a -a b c k(a) k(-a) k(c)"),
        fast_preprocessing=(
            [Function("k", [Function("u", [Function("c", [], True)], True)], True)],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("a", [], False)], True),
                Function("u", [Function("b", [], True)], True),
                Function("u", [Function("c", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("a", [], False)], True)], True),
                Function("k", [Function("u", [Function("c", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="a :- not &k{-a}. -a :- not &k{a}. b :- a. c :- b. d :- not " "&k{c}.",
        non_ground_reification="u(a) :- not k(u(-a)).\n"
        "{ k(u(-a)) } :- u(-a).\n"
        "u(-a) :- not k(u(a)).\n"
        "{ k(u(a)) } :- u(a).\n"
        "u(b) :- u(a).\n"
        "u(c) :- u(b).\n"
        "u(d) :- not k(u(c)).\n"
        "{ k(u(c)) } :- u(c).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "literal_tuple(0,-2).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,3).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-4).\n"
        "rule(disjunction(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,2).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(choice(2),normal(2)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,1).\n"
        "rule(choice(3),normal(3)).\n"
        "atom_tuple(4).\n"
        "atom_tuple(4,5).\n"
        "rule(disjunction(4),normal(3)).\n"
        "atom_tuple(5).\n"
        "atom_tuple(5,6).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,5).\n"
        "rule(disjunction(5),normal(4)).\n"
        "atom_tuple(6).\n"
        "atom_tuple(6,7).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,6).\n"
        "rule(choice(6),normal(5)).\n"
        "atom_tuple(7).\n"
        "atom_tuple(7,8).\n"
        "literal_tuple(6).\n"
        "literal_tuple(6,-7).\n"
        "rule(disjunction(7),normal(6)).\n"
        "literal_tuple(7).\n"
        "literal_tuple(7,2).\n"
        "output(k(u(-a)),7).\n"
        "literal_tuple(8).\n"
        "literal_tuple(8,4).\n"
        "output(k(u(a)),8).\n"
        "literal_tuple(9).\n"
        "literal_tuple(9,7).\n"
        "output(k(u(c)),9).\n"
        "output(u(a),3).\n"
        "output(u(-a),2).\n"
        "output(u(b),4).\n"
        "output(u(c),5).\n"
        "literal_tuple(10).\n"
        "literal_tuple(10,8).\n"
        "output(u(d),10).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['k(a) k(c) no(k(-a))', 'k(a) no(k(c)) no(k(-a))', "
        "'no(k(a)) no(k(c)) k(-a)']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="['k(a) k(c) no(k(-a))', 'k(a) no(k(c)) no(k(-a))', "
        "'no(k(a)) no(k(c)) k(-a)']",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_03_str="[('k(a) k(c) no(k(-a))', 'a c'), ('no(k(a)) no(k(c)) "
        "k(-a)', '-a')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("c", [], True)], True),
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], False)], True)], neg=[]
                ),
            ),
        ],
        candidates_wv_str="[('k(a) k(c) no(k(-a))', 'a c'), ('no(k(a)) no(k(c)) "
        "k(-a)', '-a')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function("u", [Function("a", [], True)], True),
                        Function("u", [Function("c", [], True)], True),
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k", [Function("u", [Function("a", [], False)], True)], True
                    )
                ],
                neg=[
                    Function(
                        "k", [Function("u", [Function("a", [], True)], True)], True
                    ),
                    Function(
                        "k", [Function("u", [Function("c", [], True)], True)], True
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[Function("u", [Function("a", [], False)], True)], neg=[]
                ),
            ),
        ],
        fast_preprocessing_str=("", "a -a b c d k(a) k(-a) k(c)"),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [], True)], True),
                Function("u", [Function("a", [], False)], True),
                Function("u", [Function("b", [], True)], True),
                Function("u", [Function("c", [], True)], True),
                Function("u", [Function("d", [], True)], True),
                Function("k", [Function("u", [Function("a", [], True)], True)], True),
                Function("k", [Function("u", [Function("a", [], False)], True)], True),
                Function("k", [Function("u", [Function("c", [], True)], True)], True),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="            a(1) :- not c(1).\n"
        "            c(1) :- not a(1).\n"
        "            b(1) :- not &k{ not a(1) }.\n"
        "            d(1) :- &k{ b(1) }.\n"
        "        ",
        non_ground_reification="u(a(1)) :- not u(c(1)).\n"
        "u(c(1)) :- not u(a(1)).\n"
        "u(b(1)) :- not k(not1(u(a(1)))).\n"
        "{ k(not1(u(a(1)))) } :- not1(u(a(1))).\n"
        "not1(u(a(1))) :- not u(a(1)).\n"
        "u(d(1)) :- k(u(b(1))).\n"
        "{ k(u(b(1))) } :- u(b(1)).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "literal_tuple(0,-2).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-1).\n"
        "rule(disjunction(1),normal(1)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "rule(disjunction(2),normal(1)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(choice(3),normal(2)).\n"
        "atom_tuple(4).\n"
        "atom_tuple(4,5).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,-4).\n"
        "rule(disjunction(4),normal(3)).\n"
        "atom_tuple(5).\n"
        "atom_tuple(5,6).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,5).\n"
        "rule(choice(5),normal(4)).\n"
        "atom_tuple(6).\n"
        "atom_tuple(6,7).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,6).\n"
        "rule(disjunction(6),normal(5)).\n"
        "literal_tuple(6).\n"
        "literal_tuple(6,2).\n"
        "output(u(c(1)),6).\n"
        "literal_tuple(7).\n"
        "literal_tuple(7,1).\n"
        "output(u(a(1)),7).\n"
        "output(u(b(1)),4).\n"
        "literal_tuple(8).\n"
        "literal_tuple(8,7).\n"
        "output(u(d(1)),8).\n"
        "literal_tuple(9).\n"
        "literal_tuple(9,4).\n"
        "output(k(not1(u(a(1)))),9).\n"
        "output(k(u(b(1))),5).\n"
        "output(not1(u(a(1))),2).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="['no(k(not1(a(1)))) k(b(1))', 'no(k(not1(a(1)))) "
        "no(k(b(1)))', 'k(not1(a(1))) no(k(b(1)))']",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_02_str="['no(k(not1(a(1)))) k(b(1))', 'no(k(not1(a(1)))) "
        "no(k(b(1)))', 'k(not1(a(1))) no(k(b(1)))']",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_03_str="['no(k(not1(a(1)))) k(b(1))', 'no(k(not1(a(1)))) "
        "no(k(b(1)))', 'k(not1(a(1))) no(k(b(1)))']",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        candidates_wv_str="['no(k(not1(a(1)))) k(b(1))', 'no(k(not1(a(1)))) "
        "no(k(b(1)))', 'k(not1(a(1))) no(k(b(1)))']",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    )
                ],
                extra_assumptions=Assumptions(pos=[], neg=[]),
            ),
        ],
        fast_preprocessing_str=(
            "",
            "a(1) b(1) c(1) d(1) not1(a(1)) k(not1(a(1))) " "k(b(1))",
        ),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [Number(1)], True)], True),
                Function("u", [Function("b", [Number(1)], True)], True),
                Function("u", [Function("c", [Number(1)], True)], True),
                Function("u", [Function("d", [Number(1)], True)], True),
                Function(
                    "not1",
                    [Function("u", [Function("a", [Number(1)], True)], True)],
                    True,
                ),
                Function(
                    "k",
                    [
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(1)], True)], True)],
                            True,
                        )
                    ],
                    True,
                ),
                Function(
                    "k", [Function("u", [Function("b", [Number(1)], True)], True)], True
                ),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
    Program(
        program="            a(1) :- not c(1).\n"
        "            c(1) :- not a(1).\n"
        "            b(1) :- not &k{ not a(1) }.\n"
        "            b(2) :- not &k{ not a(2) }.\n"
        "            d(1) :- &k{ b(1) }.\n"
        "            d(2) :- &k{ b(2) }.\n"
        "        ",
        non_ground_reification="u(a(1)) :- not u(c(1)).\n"
        "u(c(1)) :- not u(a(1)).\n"
        "u(b(1)) :- not k(not1(u(a(1)))).\n"
        "{ k(not1(u(a(1)))) } :- not1(u(a(1))).\n"
        "not1(u(a(1))) :- not u(a(1)).\n"
        "u(b(2)) :- not k(not1(u(a(2)))).\n"
        "{ k(not1(u(a(2)))) } :- not1(u(a(2))).\n"
        "not1(u(a(2))) :- not u(a(2)).\n"
        "u(d(1)) :- k(u(b(1))).\n"
        "{ k(u(b(1))) } :- u(b(1)).\n"
        "u(d(2)) :- k(u(b(2))).\n"
        "{ k(u(b(2))) } :- u(b(2)).\n",
        ground_reification="atom_tuple(0).\n"
        "atom_tuple(0,1).\n"
        "literal_tuple(0).\n"
        "rule(disjunction(0),normal(0)).\n"
        "atom_tuple(1).\n"
        "atom_tuple(1,2).\n"
        "rule(choice(1),normal(0)).\n"
        "atom_tuple(2).\n"
        "atom_tuple(2,3).\n"
        "literal_tuple(1).\n"
        "literal_tuple(1,-2).\n"
        "rule(disjunction(2),normal(1)).\n"
        "atom_tuple(3).\n"
        "atom_tuple(3,4).\n"
        "literal_tuple(2).\n"
        "literal_tuple(2,3).\n"
        "rule(choice(3),normal(2)).\n"
        "atom_tuple(4).\n"
        "atom_tuple(4,5).\n"
        "literal_tuple(3).\n"
        "literal_tuple(3,4).\n"
        "rule(disjunction(4),normal(3)).\n"
        "atom_tuple(5).\n"
        "atom_tuple(5,6).\n"
        "literal_tuple(4).\n"
        "literal_tuple(4,-7).\n"
        "rule(disjunction(5),normal(4)).\n"
        "atom_tuple(6).\n"
        "atom_tuple(6,7).\n"
        "literal_tuple(5).\n"
        "literal_tuple(5,-6).\n"
        "rule(disjunction(6),normal(5)).\n"
        "atom_tuple(7).\n"
        "atom_tuple(7,8).\n"
        "rule(disjunction(7),normal(5)).\n"
        "atom_tuple(8).\n"
        "atom_tuple(8,9).\n"
        "literal_tuple(6).\n"
        "literal_tuple(6,8).\n"
        "rule(choice(8),normal(6)).\n"
        "atom_tuple(9).\n"
        "atom_tuple(9,10).\n"
        "literal_tuple(7).\n"
        "literal_tuple(7,-9).\n"
        "rule(disjunction(9),normal(7)).\n"
        "atom_tuple(10).\n"
        "atom_tuple(10,11).\n"
        "literal_tuple(8).\n"
        "literal_tuple(8,10).\n"
        "rule(choice(10),normal(8)).\n"
        "atom_tuple(11).\n"
        "atom_tuple(11,12).\n"
        "literal_tuple(9).\n"
        "literal_tuple(9,11).\n"
        "rule(disjunction(11),normal(9)).\n"
        "output(u(b(2)),2).\n"
        "literal_tuple(10).\n"
        "literal_tuple(10,5).\n"
        "output(u(d(2)),10).\n"
        "literal_tuple(11).\n"
        "literal_tuple(11,7).\n"
        "output(u(c(1)),11).\n"
        "literal_tuple(12).\n"
        "literal_tuple(12,6).\n"
        "output(u(a(1)),12).\n"
        "output(u(b(1)),8).\n"
        "literal_tuple(13).\n"
        "literal_tuple(13,12).\n"
        "output(u(d(1)),13).\n"
        "literal_tuple(14).\n"
        "literal_tuple(14,2).\n"
        "output(k(not1(u(a(2)))),14).\n"
        "output(k(u(b(2))),3).\n"
        "literal_tuple(15).\n"
        "literal_tuple(15,9).\n"
        "output(k(not1(u(a(1)))),15).\n"
        "output(k(u(b(1))),9).\n"
        "output(not1(u(a(2))),0).\n"
        "output(not1(u(a(1))),6).\n",
        candidates_00_str="None",
        candidates_00=None,
        candidates_01_str="[('no(k(not1(a(1)))) k(not1(a(2))) k(b(1)) "
        "no(k(b(2)))', 'not1(a(2))'), ('no(k(not1(a(1)))) "
        "k(not1(a(2))) no(k(b(1))) no(k(b(2)))', 'not1(a(2))'), "
        "('k(not1(a(1))) k(not1(a(2))) no(k(b(1))) "
        "no(k(b(2)))', 'not1(a(2))')]",
        candidates_01=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
        ],
        candidates_02_str="[('no(k(not1(a(1)))) k(not1(a(2))) k(b(1)) "
        "no(k(b(2)))', 'not1(a(2))'), ('no(k(not1(a(1)))) "
        "k(not1(a(2))) no(k(b(1))) no(k(b(2)))', 'not1(a(2))'), "
        "('k(not1(a(1))) k(not1(a(2))) no(k(b(1))) "
        "no(k(b(2)))', 'not1(a(2))')]",
        candidates_02=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
        ],
        candidates_03_str="[('no(k(not1(a(1)))) k(not1(a(2))) k(b(1)) "
        "no(k(b(2)))', 'not1(a(2))'), ('no(k(not1(a(1)))) "
        "k(not1(a(2))) no(k(b(1))) no(k(b(2)))', 'not1(a(2))'), "
        "('k(not1(a(1))) k(not1(a(2))) no(k(b(1))) "
        "no(k(b(2)))', 'not1(a(2))')]",
        candidates_03=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
        ],
        candidates_wv_str="[('no(k(not1(a(1)))) k(not1(a(2))) k(b(1)) "
        "no(k(b(2)))', 'not1(a(2))'), ('no(k(not1(a(1)))) "
        "k(not1(a(2))) no(k(b(1))) no(k(b(2)))', 'not1(a(2))'), "
        "('k(not1(a(1))) k(not1(a(2))) no(k(b(1))) "
        "no(k(b(2)))', 'not1(a(2))')]",
        candidates_wv=[
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    )
                ],
                neg=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
            Candidate(
                pos=[
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(1)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                    Function(
                        "k",
                        [
                            Function(
                                "not1",
                                [
                                    Function(
                                        "u", [Function("a", [Number(2)], True)], True
                                    )
                                ],
                                True,
                            )
                        ],
                        True,
                    ),
                ],
                neg=[
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(1)], True)], True)],
                        True,
                    ),
                    Function(
                        "k",
                        [Function("u", [Function("b", [Number(2)], True)], True)],
                        True,
                    ),
                ],
                extra_assumptions=Assumptions(
                    pos=[
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(2)], True)], True)],
                            True,
                        )
                    ],
                    neg=[],
                ),
            ),
        ],
        fast_preprocessing_str=("", "a(1) b(1) c(1) not1(a(1)) k(not1(a(1)))"),
        fast_preprocessing=(
            [],
            [
                Function("u", [Function("a", [Number(1)], True)], True),
                Function("u", [Function("b", [Number(1)], True)], True),
                Function("u", [Function("c", [Number(1)], True)], True),
                Function(
                    "not1",
                    [Function("u", [Function("a", [Number(1)], True)], True)],
                    True,
                ),
                Function(
                    "k",
                    [
                        Function(
                            "not1",
                            [Function("u", [Function("a", [Number(1)], True)], True)],
                            True,
                        )
                    ],
                    True,
                ),
            ],
        ),
        has_fast_preprocessing=True,
        description="",
    ),
]
